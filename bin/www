#!/usr/bin/env node
// vi: ft=javascript

var bunyan = require('bunyan');
var bunyanFormat = require('bunyan-format');
var nconf = require('nconf');
var Server = require('../api/server');
var http = require('http');
var url = require('url');

nconf.env({
  separator: '_'
}).argv();
nconf.defaults(require('../defaults'));

var logger = bunyan.createLogger({
  name: nconf.get('appname'),
  level: nconf.get('log:level'),
  stream: bunyanFormat({
    outputMode: nconf.get('log:format')
  })
});

var mhttp = require('http-measuring-client').create();
mhttp.mixin(http);
mhttp.on('stat', function (parsed, stats) {
  logger.info({
    parsedUri: parsed,
    stats: stats
  }, '%s %s took %dms (%d)', stats.method || 'GET', url.format(parsed), stats.totalTime, stats.statusCode);
});

var raven = {

}

var server = new Server({
  port: nconf.get('port'),
  cafHost: nconf.get('cafHost'),
  svairHost: nconf.get('svairHost'),
  cafSslCertificate: nconf.get('cafSslCertificate'),
  cafSslKey: nconf.get('cafSslKey'),
  logger: logger,
  numeroFiscal: nconf.get('numeroFiscal'),
  referenceAvis: nconf.get('referenceAvis'),
  codePostal: nconf.get('codePostal'),
  tokensPath: nconf.get('tokensPath'),
  numeroAllocataire: nconf.get('numeroAllocataire'),
  nconf: nconf,
  raven: {
    activate: nconf.get('raven:activate'),
    dsn: nconf.get('raven:dsn'),
  },
  es: {
    host: nconf.get('es:host'),
    index: nconf.get('es:index')
  },
  ban: {
    baseUrl: nconf.get('ban:baseUrl')
  }
});

server.start(function (err) {
  if (err) {
    logger.fatal({error: err}, 'cannot recover from previous errors. shutting down now. error was', err.stack);
    setTimeout(process.exit.bind(null, 99), 10);
  }
  logger.info('Sever successfully started.');
});
